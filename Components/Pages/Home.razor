@page "/"
@using Azure;
@using Azure.AI.Vision.ImageAnalysis;
@using System;
@using System.IO;
@using System.Threading.Tasks;
@using Azure.AI.OpenAI;
@using OpenAI.Images;
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Computer Vision</h1>

<p>Insert url or type prompt.</p>
<div>
    <textarea @bind="urlPrompt" rows="5" cols="50" placeholder="Enter url to analyze or prompt to generate image"></textarea>
    <br>
    <button @onclick="AnalyzeImage">Analyze Image</button>
    <button @onclick="GenerateImage">Generate Image</button>
</div>

<div class="image-container">
    @if (isLoading)
    {
        <div class="loading-animation">
            <span class="dot"></span>
            <span class="dot"></span>
            <span class="dot"></span>
        </div>
    }
    else if (!string.IsNullOrWhiteSpace(urlPrompt))
    {
        <img src="@urlPrompt" />
    }
 
</div>
<br>

<div id="caption">
    <strong>AI Generated Summary: </strong> 
    <span>@caption</span>
</div>

@inject IConfiguration Configuration
@code
{
    string urlPrompt = "";
    string caption = "";
    bool isLoading = false;
    void AnalyzeImage()
    {
        if (string.IsNullOrWhiteSpace(urlPrompt))
        {
            caption = "Please enter a valid URL to analyze.";
            StateHasChanged();
            return;
        }

        try
        {
            var endpoint = Configuration["Vision:endpoint"];
            var key = Configuration["Vision:key"];

            ImageAnalysisClient client = new ImageAnalysisClient(new Uri(endpoint),new AzureKeyCredential(key));

            ImageAnalysisResult result = client.Analyze(new Uri(urlPrompt), VisualFeatures.Caption | VisualFeatures.Read, new ImageAnalysisOptions { GenderNeutralCaption = true});

            Console.WriteLine("Image analysis results:");
            Console.WriteLine(" Caption:");
            caption = result.Caption.Text;
            StateHasChanged();
            Console.WriteLine($"    '{result.Caption.Text}', Confidence {result.Caption.Confidence:F4}");

            Console.WriteLine(" Read:");
            foreach (DetectedTextBlock block in result.Read.Blocks)
            foreach (DetectedTextLine line in block.Lines)
            {
                Console.WriteLine($"    Line: '{line.Text}', Bounding Polygon: [{string.Join(" ", line.BoundingPolygon)}]");
                foreach (DetectedTextWord word in line.Words)
                {
                    Console.WriteLine($"    Word: '{word.Text}', Confidence {word.Confidence.ToString("#.####")}, Bounding Polygon: [{string.Join(" ", word.BoundingPolygon)}]");
                }
            }
        }
        catch (Exception e)
        {
            caption = $"Error analyzing image: {e.Message}";
        }
    }
    async void GenerateImage()
    {
        if (string.IsNullOrWhiteSpace(urlPrompt))
        {
            caption = "Please enter a prompt or URL.";
            StateHasChanged();
            return;
        }
        try
        {
            isLoading = true; 
            StateHasChanged();
        
            var endpoint = Configuration["Generate:endpoint"];
            var key = Configuration["Generate:key"];

            AzureOpenAIClient azureClient = new(new Uri(endpoint),new AzureKeyCredential(key));

            ImageClient chatClient = azureClient.GetImageClient("dall-e-2");
            var imageGeneration = await chatClient.GenerateImageAsync(urlPrompt,new ImageGenerationOptions()
            {
                Size = GeneratedImageSize.W1024xH1024
            });

            caption = urlPrompt;
            urlPrompt = imageGeneration.Value.ImageUri.ToString();
            Console.WriteLine(imageGeneration.Value.ImageUri);
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error generating image: {e.Message}");
        }
        finally{
            isLoading = false;
            StateHasChanged();
        }

        // Use the result to display the generated image
        Console.WriteLine("Image generated successfully!"); 
    }
}

